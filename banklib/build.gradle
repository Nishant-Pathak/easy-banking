apply plugin: 'com.android.library'
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
  def mainSrc = "$project.projectDir/src/main/java"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])
  executionData = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
  ])
}


android {
  compileSdkVersion 25
  buildToolsVersion '26.0.1'

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 25
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

  }
  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      testCoverageEnabled true
    }
  }
  compileOptions {
    targetCompatibility 1.7
    sourceCompatibility 1.7
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  compile 'com.android.support:appcompat-v7:25.3.1'
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile "org.robolectric:robolectric:3.0"
  androidTestCompile 'com.android.support:support-annotations:25.3.1'
  androidTestCompile 'com.android.support.test:runner:0.5'
  androidTestCompile 'com.android.support.test:rules:0.5'
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
